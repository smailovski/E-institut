<?php

namespace Proxies\__CG__\Ei\einstitutBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Cercles extends \Ei\einstitutBundle\Entity\Cercles implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getCerclesUser()
    {
        $this->__load();
        return parent::getCerclesUser();
    }

    public function setCerclesUser($u2)
    {
        $this->__load();
        return parent::setCerclesUser($u2);
    }

    public function setUser(\Doctrine\Common\Collections\ArrayCollection $values)
    {
        $this->__load();
        return parent::setUser($values);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function addUser($value)
    {
        $this->__load();
        return parent::addUser($value);
    }

    public function removeUser($value)
    {
        $this->__load();
        return parent::removeUser($value);
    }

    public function setMessages(\Doctrine\Common\Collections\ArrayCollection $values)
    {
        $this->__load();
        return parent::setMessages($values);
    }

    public function getMessages()
    {
        $this->__load();
        return parent::getMessages();
    }

    public function addMessages($value)
    {
        $this->__load();
        return parent::addMessages($value);
    }

    public function removeMessages($value)
    {
        $this->__load();
        return parent::removeMessages($value);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setNom($nom)
    {
        $this->__load();
        return parent::setNom($nom);
    }

    public function getNom()
    {
        $this->__load();
        return parent::getNom();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setVisibilite($visibilite)
    {
        $this->__load();
        return parent::setVisibilite($visibilite);
    }

    public function getVisibilite()
    {
        $this->__load();
        return parent::getVisibilite();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'nom', 'description', 'visibilite', 'cercles_user', 'users', 'message');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}