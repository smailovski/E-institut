<?php

namespace Proxies\__CG__\Ei\einstitutBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Forum extends \Ei\einstitutBundle\Entity\Forum implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setCommentForum(\Doctrine\Common\Collections\ArrayCollection $values)
    {
        $this->__load();
        return parent::setCommentForum($values);
    }

    public function getCommentForum()
    {
        $this->__load();
        return parent::getCommentForum();
    }

    public function addCommentForum($value)
    {
        $this->__load();
        return parent::addCommentForum($value);
    }

    public function removeCommentForum($value)
    {
        $this->__load();
        return parent::removeCommentForum($value);
    }

    public function getForumRubrique()
    {
        $this->__load();
        return parent::getForumRubrique();
    }

    public function setForumRubrique($u2)
    {
        $this->__load();
        return parent::setForumRubrique($u2);
    }

    public function getForumUser()
    {
        $this->__load();
        return parent::getForumUser();
    }

    public function setForumUser($u2)
    {
        $this->__load();
        return parent::setForumUser($u2);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setTitre($titre)
    {
        $this->__load();
        return parent::setTitre($titre);
    }

    public function getTitre()
    {
        $this->__load();
        return parent::getTitre();
    }

    public function setContenu($contenu)
    {
        $this->__load();
        return parent::setContenu($contenu);
    }

    public function getContenu()
    {
        $this->__load();
        return parent::getContenu();
    }

    public function setDateCreation($dateCreation)
    {
        $this->__load();
        return parent::setDateCreation($dateCreation);
    }

    public function getDateCreation()
    {
        $this->__load();
        return parent::getDateCreation();
    }

    public function setStatut($statut)
    {
        $this->__load();
        return parent::setStatut($statut);
    }

    public function getStatut()
    {
        $this->__load();
        return parent::getStatut();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'titre', 'contenu', 'dateCreation', 'statut', 'comment_forum', 'forum_rubrique', 'forum_user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}